
%token  T_FLOAT         \d+\.\d+
%token  T_INT           \d+

%token  T_PLUS          \+
%token  T_MINUS         \-
%token  T_MUL           \*
%token  T_DIV           [/รท]

%token  T_BRACE_OPEN    \(
%token  T_BRACE_CLOSE   \)

%skip   T_WHITESPACE    \s+

%pragma root Expression

Expression -> { return \is_array($children) ? $children[0] : $children; }
  : BinaryExpression()
  ;

BinaryExpression
  : AdditiveExpression()
  ;

AdditiveExpression -> {
    while (\count($children) >= 3) {
        [$a, $op, $b] = [
            \array_shift($children),
            \array_shift($children),
            \array_shift($children),
        ];

        switch ($op->getName()) {
            case 'T_PLUS':
                \array_unshift($children, new Ast\Addition([$a, $b], $a->getOffset()));
                break;

            case 'T_MINUS':
                \array_unshift($children, new Ast\Subtraction([$a, $b], $a->getOffset()));
                break;
        }
    }

    return $children;
}
  : (
      MultiplicativeExpression() (<T_PLUS>|<T_MINUS>)
    )* MultiplicativeExpression()
  ;

MultiplicativeExpression -> {
    while (\count($children) >= 3) {
        [$a, $op, $b] = [
            \array_shift($children),
            \array_shift($children),
            \array_shift($children),
        ];

        switch ($op->getName()) {
            case 'T_DIV':
                \array_unshift($children, new Ast\Division([$a, $b], $a->getOffset()));
                break;

            case 'T_MUL':
                \array_unshift($children, new Ast\Multiplication([$a, $b], $a->getOffset()));
                break;
        }
    }

    return $children;
}
  : (
      UnaryExpression() (<T_DIV>|<T_MUL>)
    )* UnaryExpression()
  ;

UnaryExpression
  : ::T_BRACE_OPEN:: Expression() ::T_BRACE_CLOSE::
  | Literal()
  ;

Literal -> { return new Ast\Literal($children, $offset); }
  : <T_FLOAT>
  | <T_INT>
  ;
