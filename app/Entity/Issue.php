<?php
/**
 * This file is part of railt.org package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace App\Entity;

use App\Entity\Common\Identifiable;
use App\Entity\Common\Timestampable;
use App\Entity\Issue\Author;
use Carbon\Carbon;
use Doctrine\ORM\Mapping as ORM;
use Illuminate\Support\Str;
use Serafim\Hydrogen\Collection;

/**
 * @ORM\Entity()
 * @ORM\Table(name="issues")
 */
class Issue
{
    use Identifiable;
    use Timestampable;

    /**
     * @var int Autogenerated
     */
    private static $lastIssueNumber = 0;

    /**
     * @var int
     * @ORM\Column(name="number", type="integer")
     */
    private $number;

    /**
     * @var string
     * @ORM\Column(name="title", type="string")
     */
    private $title = '';

    /**
     * @var string
     * @ORM\Column(name="url", type="string")
     */
    private $url;

    /**
     * @var array
     * @ORM\Column(name="labels", type="json_array")
     */
    private $labels = [];

    /**
     * @var array|Author
     * @ORM\Column(name="author", type="json")
     */
    private $author;

    /**
     * Issue constructor.
     * @param string $url
     * @param Author $author
     * @param int|null $id
     */
    public function __construct(string $url, Author $author, int $id = null)
    {
        $this->url = $url;
        $this->author = $author;
        $this->number = $id ?? ++self::$lastIssueNumber;

        $this->bootTimestamps();
    }

    /**
     * @return int
     */
    public function getNumber(): int
    {
        return $this->number;
    }

    /**
     * @return string
     */
    public function getUrl(): string
    {
        return $this->url;
    }

    /**
     * @param string $label
     * @return Issue
     */
    public function addLabel(string $label): Issue
    {
        $this->labels = (array)$this->labels;
        $this->labels[] = Str::ucfirst($label);
        $this->labels = \array_unique($this->labels);

        return $this;
    }

    /**
     * @param Issue $issue
     * @return Issue
     */
    public function update(Issue $issue): Issue
    {
        $this->title  = $issue->getTitle();
        $this->labels = $issue->getLabels();
        $this->author = $issue->getAuthor();

        $this->updatedAt($issue->getUpdated());
        $this->createdAt($issue->getCreated());

        return $this;
    }

    /**
     * @return Collection
     */
    public function getLabels(): Collection
    {
        return Collection::make((array)$this->labels);
    }

    /**
     * @return Author
     */
    public function getAuthor(): Author
    {
        if (\is_string($this->author)) {
            $this->author = \json_decode($this->author, true);
        }

        if (\is_array($this->author)) {
            $this->author = Author::fromArray($this->author);
        }

        return $this->author;
    }

    /**
     * @return string
     */
    public function getTitle(): string
    {
        return $this->title;
    }

    /**
     * @param Carbon $date
     * @return Issue
     */
    public function updatedAt(Carbon $date): Issue
    {
        $this->updatedAt = $date;

        return $this;
    }

    /**
     * @param Carbon $date
     * @return Issue
     */
    public function createdAt(Carbon $date): Issue
    {
        $this->createdAt = $date;

        return $this;
    }

    /**
     * @param string $title
     * @return Issue
     */
    public function rename(string $title): Issue
    {
        $this->title = $title;

        return $this;
    }
}
