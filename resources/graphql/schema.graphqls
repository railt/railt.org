#
# Controllers
#

@use(class: "App\\GraphQL\\Controllers\\MenuController")
@use(class: "App\\GraphQL\\Controllers\\DocumentationController")

#
# Presenters
#

@use(class: "App\\GraphQL\\Out\\MenuPresenter")
@use(class: "App\\GraphQL\\Out\\NavigationPresenter")
@use(class: "App\\GraphQL\\Out\\DocumentationPresenter")

#
# ==================================================================
#   Application
# ==================================================================
#

schema {
    query: Query
}

type Query {
    docs(path: String): Documentation
        @route(action: "DocumentationController@findByUrn")

    menu: [Menu!]!
        @route(action: "MenuController@findRootItems")
}

#
# ==================================================================
#   Inputs
# ==================================================================
#

input DocumentationInput {}

#
# ==================================================================
#   Models
# ==================================================================
#

type Documentation implements Updatable
    @out(action: "DocumentationPresenter@fromEntity")
{
    id: ID!
    url: String!
    urn: String!
    title: String!
    content: String!
    nav: [DocumentationNavigation!]!
    updatedAt: Carbon!
}


type DocumentationNavigation
    @out(action: "NavigationPresenter@fromEntity")
{
    slug: String!
    level: Int!
    title: String!
}


type Menu
    @out(action: "MenuPresenter@fromEntity")
{
    id: ID!
    urn: String
    orderId: Int!
    title: String!
    type: MenuType!
    children: [Menu!]!
        @route(action: "MenuController@findChildren", relation: { child: "parentId" })
}

enum MenuType { TAB, DOCUMENTATION_PAGE }
